package TEXT.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Alternation;
  private ConceptPresentation props_Grammar;
  private ConceptPresentation props_GrammarRule;
  private ConceptPresentation props_Grouping;
  private ConceptPresentation props_NonTerminal;
  private ConceptPresentation props_Optional;
  private ConceptPresentation props_Production;
  private ConceptPresentation props_Sequence;
  private ConceptPresentation props_Terminal;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Alternation:
        if (props_Alternation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Alternation");
          props_Alternation = cpb.create();
        }
        return props_Alternation;
      case LanguageConceptSwitch.Grammar:
        if (props_Grammar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Grammar = cpb.create();
        }
        return props_Grammar;
      case LanguageConceptSwitch.GrammarRule:
        if (props_GrammarRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GrammarRule = cpb.create();
        }
        return props_GrammarRule;
      case LanguageConceptSwitch.Grouping:
        if (props_Grouping == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Grouping");
          props_Grouping = cpb.create();
        }
        return props_Grouping;
      case LanguageConceptSwitch.NonTerminal:
        if (props_NonTerminal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x3081af84875b46f6L, 0xbdd6db0e8277a296L, 0x1c80bcf267b85c28L, 0x1c80bcf267cd81ebL, "reference", "", "");
          props_NonTerminal = cpb.create();
        }
        return props_NonTerminal;
      case LanguageConceptSwitch.Optional:
        if (props_Optional == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Optional");
          props_Optional = cpb.create();
        }
        return props_Optional;
      case LanguageConceptSwitch.Production:
        if (props_Production == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Production = cpb.create();
        }
        return props_Production;
      case LanguageConceptSwitch.Sequence:
        if (props_Sequence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Sequence");
          props_Sequence = cpb.create();
        }
        return props_Sequence;
      case LanguageConceptSwitch.Terminal:
        if (props_Terminal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Terminal");
          props_Terminal = cpb.create();
        }
        return props_Terminal;
    }
    return null;
  }
}
