package TEXT.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class GrammarRule_Constraints extends BaseConstraintsDescriptor {
  public GrammarRule_Constraints() {
    super(CONCEPTS.GrammarRule$eC);
  }

  private boolean _additional_hasValidProductions(SNode ruleNode) {
    if (ListSequence.fromList(SLinkOperations.getChildren(ruleNode, LINKS.productions$Y5o3)).isEmpty()) {
      LogContext.with(GrammarRule_Constraints.class, null, null, null).error("A grammar rule must have at least one production.");
      return false;
    }
    return true;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept GrammarRule$eC = MetaAdapterFactory.getConcept(0x3081af84875b46f6L, 0xbdd6db0e8277a296L, 0x1c80bcf267b85c1fL, "TEXT.structure.GrammarRule");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink productions$Y5o3 = MetaAdapterFactory.getContainmentLink(0x3081af84875b46f6L, 0xbdd6db0e8277a296L, 0x1c80bcf267b85c1fL, 0x1c80bcf267b85c35L, "productions");
  }
}
