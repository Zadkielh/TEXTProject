package TEXT.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Terminal_Constraints extends BaseConstraintsDescriptor {
  public Terminal_Constraints() {
    super(CONCEPTS.Terminal$hy);
  }

  public static class Value_Property extends BasePropertyConstraintsDescriptor {
    public Value_Property(ConstraintsDescriptor container) {
      super(PROPS.value$NkwS, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:e6d997e8-3f7b-49a4-9d1d-f61eaac335ee(TEXT.constraints)", "2053849179389485823"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      if ((propertyValue == null || propertyValue.length() == 0)) {
        LogContext.with(Terminal_Constraints.class, null, null, null).error("A terminal must have a non-empty value.");
        return false;
      }
      return true;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.value$NkwS, new Value_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Terminal$hy = MetaAdapterFactory.getConcept(0x3081af84875b46f6L, 0xbdd6db0e8277a296L, 0x1c80bcf267b85c25L, "TEXT.structure.Terminal");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$NkwS = MetaAdapterFactory.getProperty(0x3081af84875b46f6L, 0xbdd6db0e8277a296L, 0x1c80bcf267b85c25L, 0x1c80bcf267bbfdf2L, "value");
  }
}
